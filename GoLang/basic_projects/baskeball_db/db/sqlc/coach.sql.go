// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: coach.sql

package db

import (
	"context"
)

const createCoach = `-- name: CreateCoach :one
INSERT INTO coaches (
  username,
  hashed_password
) VALUES (
  $1, $2
) RETURNING id, username, hashed_password, created_at
`

type CreateCoachParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateCoach(ctx context.Context, arg CreateCoachParams) (Coach, error) {
	row := q.db.QueryRowContext(ctx, createCoach, arg.Username, arg.HashedPassword)
	var i Coach
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCoach = `-- name: DeleteCoach :exec
DELETE FROM coaches
WHERE username = $1
`

func (q *Queries) DeleteCoach(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteCoach, username)
	return err
}

const getCoachById = `-- name: GetCoachById :one
SELECT id, username, hashed_password, created_at FROM coaches
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCoachById(ctx context.Context, id int64) (Coach, error) {
	row := q.db.QueryRowContext(ctx, getCoachById, id)
	var i Coach
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const getCoachByUsername = `-- name: GetCoachByUsername :one
SELECT id, username, hashed_password, created_at FROM coaches
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetCoachByUsername(ctx context.Context, username string) (Coach, error) {
	row := q.db.QueryRowContext(ctx, getCoachByUsername, username)
	var i Coach
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}

const updateCoachPassword = `-- name: UpdateCoachPassword :one
UPDATE coaches
SET hashed_password = $2
WHERE username = $1
RETURNING id, username, hashed_password, created_at
`

type UpdateCoachPasswordParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdateCoachPassword(ctx context.Context, arg UpdateCoachPasswordParams) (Coach, error) {
	row := q.db.QueryRowContext(ctx, updateCoachPassword, arg.Username, arg.HashedPassword)
	var i Coach
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.CreatedAt,
	)
	return i, err
}
