// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: player.sql

package db

import (
	"context"
	"database/sql"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (
  name,
  role
) VALUES (
  $1, $2
) RETURNING id, name, role, team, created_at
`

type CreatePlayerParams struct {
	Name string `json:"name"`
	Role Roles  `json:"role"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer, arg.Name, arg.Role)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Team,
		&i.CreatedAt,
	)
	return i, err
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE FROM players
WHERE id = $1
`

func (q *Queries) DeletePlayer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePlayer, id)
	return err
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, name, role, team, created_at FROM players
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, id int64) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Team,
		&i.CreatedAt,
	)
	return i, err
}

const getPlayerForUpdate = `-- name: GetPlayerForUpdate :one
SELECT id, name, role, team, created_at FROM players
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetPlayerForUpdate(ctx context.Context, id int64) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerForUpdate, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Team,
		&i.CreatedAt,
	)
	return i, err
}

const getPlayers = `-- name: GetPlayers :many
SELECT id, name, role, team, created_at FROM players
WHERE name = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type GetPlayersParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetPlayers(ctx context.Context, arg GetPlayersParams) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, getPlayers, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Player{}
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Role,
			&i.Team,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamsPlayers = `-- name: GetTeamsPlayers :many
SELECT id, name, role, team, created_at FROM players
WHERE team = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type GetTeamsPlayersParams struct {
	Team   sql.NullInt64 `json:"team"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) GetTeamsPlayers(ctx context.Context, arg GetTeamsPlayersParams) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, getTeamsPlayers, arg.Team, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Player{}
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Role,
			&i.Team,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlayersTeam = `-- name: UpdatePlayersTeam :one
UPDATE players
SET team = $2
WHERE id = $1
RETURNING id, name, role, team, created_at
`

type UpdatePlayersTeamParams struct {
	ID   int64         `json:"id"`
	Team sql.NullInt64 `json:"team"`
}

func (q *Queries) UpdatePlayersTeam(ctx context.Context, arg UpdatePlayersTeamParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updatePlayersTeam, arg.ID, arg.Team)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Role,
		&i.Team,
		&i.CreatedAt,
	)
	return i, err
}
