// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Roles string

const (
	RolesGuard   Roles = "guard"
	RolesForward Roles = "forward"
	RolesCenter  Roles = "center"
)

func (e *Roles) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Roles(s)
	case string:
		*e = Roles(s)
	default:
		return fmt.Errorf("unsupported scan type for Roles: %T", src)
	}
	return nil
}

type NullRoles struct {
	Roles Roles
	Valid bool // Valid is true if Roles is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoles) Scan(value interface{}) error {
	if value == nil {
		ns.Roles, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Roles.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoles) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Roles), nil
}

type Coach struct {
	ID             int64     `json:"id"`
	Username       string    `json:"username"`
	HashedPassword string    `json:"hashed_password"`
	CreatedAt      time.Time `json:"created_at"`
}

type Player struct {
	ID        int64         `json:"id"`
	Name      string        `json:"name"`
	Role      Roles         `json:"role"`
	Team      sql.NullInt64 `json:"team"`
	CreatedAt time.Time     `json:"created_at"`
}

type Team struct {
	ID        int64     `json:"id"`
	CoachID   int64     `json:"coach_id"`
	Wins      int32     `json:"wins"`
	CreatedAt time.Time `json:"created_at"`
}

type Transfer struct {
	ID       int64 `json:"id"`
	Player   int64 `json:"player"`
	FromTeam int64 `json:"from_team"`
	ToTeam   int64 `json:"to_team"`
}
