// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: teams.sql

package db

import (
	"context"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (
  coach_id
) VALUES (
  $1
) RETURNING id, coach_id, wins, created_at
`

func (q *Queries) CreateTeam(ctx context.Context, coachID int64) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, coachID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.CoachID,
		&i.Wins,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM teams
WHERE id = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, id)
	return err
}

const getTeam = `-- name: GetTeam :one
SELECT id, coach_id, wins, created_at FROM teams
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeam(ctx context.Context, id int64) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeam, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.CoachID,
		&i.Wins,
		&i.CreatedAt,
	)
	return i, err
}

const listTeams = `-- name: ListTeams :many
SELECT id, coach_id, wins, created_at FROM teams
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTeamsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTeams(ctx context.Context, arg ListTeamsParams) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listTeams, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Team{}
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.CoachID,
			&i.Wins,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeamsWin = `-- name: UpdateTeamsWin :one
UPDATE teams
SET wins = $2
WHERE id = $1
RETURNING id, coach_id, wins, created_at
`

type UpdateTeamsWinParams struct {
	ID   int64 `json:"id"`
	Wins int32 `json:"wins"`
}

func (q *Queries) UpdateTeamsWin(ctx context.Context, arg UpdateTeamsWinParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, updateTeamsWin, arg.ID, arg.Wins)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.CoachID,
		&i.Wins,
		&i.CreatedAt,
	)
	return i, err
}
